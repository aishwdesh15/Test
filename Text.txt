"""
 Utils class for cleansing spark based cmd data cement apps.
"""
from cement.utils.misc import minimal_logger

LOG = minimal_logger(__name__)


def cleanse_retokenize(package, dataset, extract_date, target_s3_path):
    from ..spark_s3 import Dataset
    from ..data_fabric_utils import DataFabricS3ConfigProvider

    cmd_raw_read = Dataset(package, dataset)
    config_provider = DataFabricS3ConfigProvider([cmd_raw_read], [])
    cmd_raw_data = read_raw_cmd(cmd_raw_read, config_provider, dataset, extract_date, package)

    cmd_raw_data \
        .filter(cmd_raw_data.ENCRYPTED_KEY_1.startswith("XXX") | cmd_raw_data.ENCRYPTED_KEY_2.startswith("XXX")) \
        .write \
        .options(header='true') \
        .mode('overwrite') \
        .csv(target_s3_path)


def read_raw_cmd(cmd_raw_read, config_provider, dataset, extract_date, package):
    from pyspark.sql import SparkSession

    spark_conf = config_provider.get_spark_config()
    LOG.info(f"Spark Config - {spark_conf.getAll()}")
    spark = SparkSession \
        .builder \
        .config(conf=spark_conf) \
        .getOrCreate()
    cmd_raw_data = spark \
        .read \
        .format('csv') \
        .options(header='true') \
        .load(f'{config_provider.get_s3_read_prefix(cmd_raw_read)}/{package}/{dataset}/EXTRACT_DATE={extract_date}/*')
    cmd_raw_data.show()
    return cmd_raw_data


def cleanse_retokenize_data_fabric(package, dataset, extract_date):
    from ..spark_s3 import Dataset
    from ..data_fabric_utils import DataFabricS3ConfigProvider

    cmd_raw_read = Dataset(package, dataset)
    cmd_invalid_tokens = Dataset('cmd_invl_tkn', dataset)
    config_provider = DataFabricS3ConfigProvider([cmd_raw_read], [cmd_invalid_tokens])
    cmd_raw_data = read_raw_cmd(cmd_raw_read, config_provider, dataset, extract_date, package)

    LOG.info(f"Upload location for {cmd_invalid_tokens.dataset} - "
             f"{config_provider.get_s3_upload_prefix(cmd_invalid_tokens)}")

    cmd_raw_data \
        .filter(cmd_raw_data.ENCRYPTED_KEY_1.startswith("XXX") | cmd_raw_data.ENCRYPTED_KEY_2.startswith("XXX")) \
        .write \
        .options(header='true') \
        .mode('overwrite') \
        .csv(f'{config_provider.get_s3_upload_prefix(cmd_invalid_tokens)}/EXTRACT_DATE={extract_date}/')

    config_provider.complete_upload(cmd_invalid_tokens)
